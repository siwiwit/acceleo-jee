[module structure('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes/]
[import org::acceleo::module::pim::uml21::services::uml2services /]
[import org::acceleo::module::pim::uml21::services::stringservice /]

[query public classAttributes(class : Class) : Set(Property) =
class.ownedAttribute->union(
if(class.getAssociations()->notEmpty() and
	class.getAssociations().oppositeAttributeOf(class)->notEmpty() and 
	class.getAssociations().oppositeAttributeOf(class)->select(isNavigable())->notEmpty()) then
	class.getAssociations().oppositeAttributeOf(class)->select(isNavigable())->asSet()
else
	Set{}
endif
)
/]

[query public itfAttributes(interface : Interface) : Set(Property) =
interface.getAssociations()->filter(Association).oppositeAttributeOf(interface)->select(isNavigable()) 
->including(interface.ownedAttribute)->asSet()
/]

[template public generateImports(class:Class)]
[for (class.classAttributes())]
		[let typeName : String = class.name]
			[if (class._package.name <> 'UMLPrimitiveTypes' and 
				typeName <> 'String' and typeName <> 'Integer' and 
				typeName <> 'Float' and typeName <> 'Long' and 
				typeName <> 'Boolean' and typeName <> 'Date')]
import [class.qualifiedName.replaceAll('::','.')/];
			[/if]		
		[/let]

[/for]

[/template]


[template public generateParameters(operation:Operation)]
[operation.getRealParameters()->filter(Parameter).genDeclare()->sep(', ')/]
[/template]


[template public genDeclare(parameter:Parameter)]
final [parameter.convertToJavaType()/] [parameter.name/]
[/template]


[template public paramName(parameter:Parameter)]
some[name.toUpperFirst()/]
[/template]


[template public paramName(property:Property)]
some[name.toUpperFirst()/]
[/template]


[template public generateRawParameters(operation:Operation)]
[operation.getRealParameters()->filter(Parameter).genRawDeclare()->sep(', ')/]
[/template]


[template public genRawDeclare(parameter:Parameter)]
[parameter.convertToJavaType()/] [name.toLowerFirst()/]
[/template]


[template public generateReturn(operation:Operation)]
[if (type = null)]void[else][operation.returnResult().convertToJavaType()/][/if]
[/template]


[template public generateParameterNames(operation:Operation)]
[operation.getRealParameters()->collect(name)->sep(', ')/]
[/template]


[template public generateJavadoc(namedElement:NamedElement)]
/**
[namedElement.generateJavadocBody()/]
 */
[/template]


[template public generateJavadocBody(namedElement:NamedElement)]
 
 * <!-- [protected ('protected')]
 * <p>
 * </p>
 * <!-- [/protected] for [name/] -->[if (ownedComment._body->size() > 0)]
 * <p>[ownedComment._body/]</p>
	[/if]
[/template]


[template public generateJavadoc(operation:Operation)]
	/**
[operation.generateJavadocBody()/]
	 */
[/template]


[template public generateJavadocBody(operation:Operation)]
	 * <!-- [protected ('protected')]	 
	 * <p>
	 * </p>
[for (param:Parameter | operation.getRealParameters())]
	 * @param [param.name/] [if (param.ownedComment._body->size() > 0)][ownedComment._body/][/if]
[/for]
[if (type <> null)]
	 * @return [type.ownedComment._body/]
[/if]
	 * <!-- [/protected] for [name/] -->[if (ownedComment._body->size() > 0)]
	 * <p>[ownedComment._body/]</p>
[/if]

[/template]


[template public extensions(class:Class)]
[if (not (class.general->isEmpty()))]extends [class.general.name/][/if]
[/template]


[template public normalizedName(package:Package)]
[name.toStandardNotation().toLower()/]
[/template]



