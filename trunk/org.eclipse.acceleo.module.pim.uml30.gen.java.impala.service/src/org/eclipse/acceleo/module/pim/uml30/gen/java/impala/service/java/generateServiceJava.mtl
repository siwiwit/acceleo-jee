[comment encoding = UTF-8 /]
[module generateServiceJava('http://www.eclipse.org/uml2/3.0.0/UML') extends org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::generateJavaClass]
[import org::acceleo::module::pim::uml21::gen::java::common::common/]
[import org::acceleo::module::pim::uml21::gen::java::common::requests/]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics/]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes/]
[import org::acceleo::module::pim::uml21::gen::java::common::structure/]
[import org::acceleo::module::pim::uml21::services::uml2services /]
[import org::acceleo::module::pim::uml21::services::stringservice /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::service::common::servicePathUtil /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::pathUtil /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::requests /]
[import org::acceleo::module::pim::uml21::gen::java::spring::common /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::entityUtil /]

[template public generateServiceJava(aClass : Class)]
[aClass.generateJavaClass()/]
[/template]

[template public generateJavaClass(aClass : Class) overrides generateJavaClass ]
[comment This template is called by the main module file /]
	[file (aClass.getModel().generateProjectFolder().concat(aClass.getModel().pathToMainJava()).concat('/').concat(aClass.generateJavaPackagePath()).concat('/').concat(aClass.name).concat('.java'), false, 'ISO-8859-1')]
package [aClass.generateJavaPackage()/];
// [protected ('imports')] 

import java.io.Serializable;
[if (aClass.getMultiplicity()->notEmpty())]
	[if (aClass.getMultiplicity()->select(aMultiplicityElement:MultiplicityElement|aMultiplicityElement.isOrdered)->notEmpty())]
import java.util.List;
import java.util.ArrayList;
	[/if]
	[if (aClass.getMultiplicity()->select(aMultiplicityElement:MultiplicityElement|aMultiplicityElement.isUnique)->notEmpty())]
import java.util.Set;
import java.util.HashSet;
	[/if]
	[if (aClass.getMultiplicity()->select(aMultiplicityElement:MultiplicityElement|not (aMultiplicityElement.isOrdered) and not (aMultiplicityElement.isUnique))->notEmpty())]
import java.util.Collection;
	[/if]
[/if]

[if (attribute.type->select(getProperty('java.typeconversion.' + name) = 'Date')->notEmpty())]
import java.util.Date;
[/if]
[if (aClass.getMultiplicity()->notEmpty())]
	[for (aMultiplicityElement:MultiplicityElement | aClass.getMultiplicity())]
		[if (aMultiplicityElement.oclIsTypeOf(Type))]
			[if (aClass.generateJavaPackage() <> aMultiplicityElement.oclAsType(Type).generateJavaPackage())]
import [aMultiplicityElement.oclAsType(Type).generateJavaPackage()/].[aMultiplicityElement.oclAsType(Type).name/];
			[/if]
		[/if]		
	[/for]
[/if]
[if (not (aClass.superClass->isEmpty()))]
	[if (aClass.generateJavaPackage() <> aClass.superClass->asSequence()->first().generateJavaPackage())]
import [aClass.superClass.generateJavaPackage()/].[aClass.superClass.name/];
	[/if]
[/if]
[for (aDaoClass : Class | aClass.getRelatedDaos())]
	[if (aClass.generateJavaPackage() <> aDaoClass.generateJavaPackage())]
import [aDaoClass.generateJavaPackage()/].[aDaoClass.name/]Dao;
	[/if]
[/for]
// [/protected]

/**
[if (aClass.ownedComment._body->size() > 0)]
 * [aClass.ownedComment._body.replaceAll('\n', '\n * ')/]
[else]
 * Warning: no comment in the model for interface [name/].
[/if]
 */
public class [aClass.name/][aClass.extensions()/] implements Serializable[if (aClass.interfaceRealization->size() > 0)], [aClass.implementedInterfaces()/][/if] {

    /**
     * serialVersionUID is used for serialization.
     */
    private static final long serialVersionUID = 1L;


[for (prop:Property|aClass.classAttributes())]
    /**
     * Field [prop.name/].
     */
    protected [prop.convertToJavaType()/] [prop.name/];

[/for]
[for (aDaoClass:Class|aClass.getRelatedDaos())]
    /**
     * Field [aDaoClass.name.toLowerFirst()/]Dao.
     */
    protected [aDaoClass.name/]Dao [aDaoClass.name.toLowerFirst()/]Dao;

[/for]
    /**
     * Default constructor.
     */
    public [aClass.name/]() {
        super();
[for (prop:Property|aClass.classAttributes())]
	[if (prop.upper <> 1)]
		[if (prop.isOrdered)]
		        [prop.name/] = new ArrayList<[prop.type.name/]>();
		[else]
		        [prop.name/] = new HashSet<[prop.type.name/]>();
		[/if]
	[/if]
[/for]
    }

[let props : Set(Property) = aClass.classAttributes()]
	[if (props->size() > 0)]

    /**
     * Constructor with all parameters initialized.
		[for (prop:Property|props)]
     * @param [prop.paramName()/]
			[if (prop.ownedComment._body->size() > 0)]
     *            [prop.ownedComment._body.replaceAll('n', '\n     *            ')/]
			[else]
     *            Warning, no comment in the model.
			[/if]
		[/for]
     */
    public [aClass.name/]([aClass.classAttributes().asParameter()->sep(', ')/]) {
		[for (prop:Property|props)]
        this.[prop.name/] = [prop.paramName()/];
		[/for]
    }
	[/if]
	[for (prop:Property|props)]
    /**
     * Returns [name/].
		[if (prop.ownedComment._body->size() > 0)]
     * @return [prop.ownedComment._body.replaceAll('\n', '\n     * ')/]
		[else]
     * @return Warning, no comment in the model.
		[/if]
     */
    [prop.getterSignature()/] {
		[if (prop.isDerived)]
        // [protected ('getter')] 
		// of derived [prop.name/] attribute
		// TODO Logic to calculate [prop.name/]
        return this.[prop.name/];
        // [/protected]
		[else]
        return [prop.name/];
		[/if]
    }

		[if (not (prop.isReadOnly) and not (prop.isDerived))]
    /**
     * Sets a value to parameter [prop.name/].
     * @param [prop.paramName()/]
			[if (prop.ownedComment._body->size() > 0)]
     *            [prop.ownedComment._body.replaceAll('\n', '\n     *            ')/]
			[else]
     *            Warning, no comment in the model.
			[/if]
     */
    [prop.setterSignature()/] {
        this.[prop.name/] = [prop.paramName()/];
    }
		[/if]

		[if (upper = -1 or upper > 1)]
    /**
     * Adds a [name/] to the [name/] Collection.
			[if (opposite <> null)]
     * Birectionnal association : add the current [aClass.name/] instance to
     * the given [name/] parameter.
			[/if]
     * @param [name/]Elt Element to add
     */
    public void add[prop.name.toUpperFirst()/](final [prop.type.convertToJavaType()/] [prop.name/]Elt) {
        [prop.name/].add([prop.name/]Elt);
			[if (prop.opposite <> null)]
				[if (prop.opposite.upper = 1)]
        [prop.name/]Elt.set[prop.opposite.name.toUpperFirst()/](this);
				[else]
        [prop.name/]Elt.get[prop.opposite.name.toUpperFirst()/]().add(this);
				[/if]
			[/if]
    }

    /**
     * Removes a [prop.name/] from the [prop.name/] Collection.
			[if (prop.opposite <> null)]
     * Birectionnal association : remove the current [aClass.name/] instance
     * from the given [prop.name/] parameter.
			[/if]
     * @param [prop.name/]Elt Element to remove
     */
    public void remove[prop.name.toUpperFirst()/](final [prop.type.convertToJavaType()/] [prop.name/]Elt) {
        [prop.name/].remove([prop.name/]Elt);
			[if (prop.opposite <> null)]
				[if (prop.opposite.upper = 1)]
        [prop.name/]Elt.set[prop.opposite.name.toUpperFirst()/](null);
				[else]
        [prop.name/]Elt.get[prop.opposite.name.toUpperFirst()/]().remove(this);
				[/if]
			[/if]
    }
		[/if]
	[/for]
	[for (aDaoClass : Class | aClass.getRelatedDaos())]
		[if (aClass.generateJavaPackage() <> aDaoClass.generateJavaPackage())]
	public [aDaoClass.name/]Dao get[aDaoClass.name/]Dao() {
		return this.[aDaoClass.name.toLowerFirst()/]Dao;
	}

	public void set[aDaoClass.name/]Dao([aDaoClass.name/]Dao the[aDaoClass.name/]Dao) {
		return this.[aDaoClass.name.toLowerFirst()/]Dao;
	}
		[/if]
	[/for]

[/let]



[if (aClass.interfaceRealization->notEmpty())]
	[for (interface:Interface|aClass.interfaceRealization.target->filter(Interface))]
    /* Implementation of interface [aClass.name/]: start */
		[for (prop:Property|interface.itfAttributes())] 
			[if (aClass.attribute->select(name = prop.name)->notEmpty())]

    /**
     * Implementation of [interface.name/]'s [prop.name/] getter.
				[if (prop.ownedComment._body->size() > 0)]
     * @return [prop.ownedComment._body.replaceAll('\n', '\n     * ')/]
				[else]
     * @return Warning, no comment in the model.
				[/if]
     * @see [interface.name/].[prop.getterName()/]
     */
    [prop.getterSignature()/] {
        // [protected ('extra getter')] 
		// for getter of <%name%>  ['['/]DO NOT REMOVE[']'/]
        // TODO Implement me !
        throw new UnsupportedOperationException("Method not yet implemented");
        // [/protected] 
    }

    /**
     * Implementation of [interface.name/]'s [prop.name/] setter.
     * @param [prop.paramName()/]
				[if (prop.ownedComment._body->size() > 0)]
     *            [prop.ownedComment._body.replaceAll('\n', '\n     *            ')/]
				[else]
     *            Warning, no comment in the model.
				[/if]
     * @see [interface.name/].[prop.setterName()/]
     */
    [prop.setterSignature()/] {
        // [protected ('setter')] 
		// for getter of <%name%>  ['['/]DO NOT REMOVE[']'/]
        // TODO Implement me !
        throw new UnsupportedOperationException("Method not yet implemented");
        // [/protected] for setter of [prop.name/] ['['/]DO NOT REMOVE[']'/]
    }

			[/if]

		[/for]
    /* Implementation of interface [name/]: end */

	[/for]
[/if]

}

[/file]
[aClass.getAssociations()/]
[/template]


[comment][query public isSupperAsEntity(aClass : Class) : Boolean = 
aClass.superClass->notEmpty() and aClass.superClass->asSequence()->first().hasStereotype('Entity')/][/comment]


[template public extensions(aClass:Class)]
[if (not (aClass.superClass->isEmpty()))] extends [aClass.superClass.name/][/if]
[/template]


[template public asParameter(property:Property) ]
[property.convertToJavaType()/] [property.paramName()/]
[/template]


[template public implementedInterfaces(aClass:Class)]
[aClass.interfaceRealization.target->filter(Interface).name->sep(', ')/]
[/template]



[query public getOtherPKProperties(aClass : Class) : Set(Property) =
if(aClass.interfaceRealization->notEmpty()and 
	aClass.interfaceRealization.target->notEmpty() and
	aClass.interfaceRealization.target->filter(Interface)->notEmpty() and
	aClass.interfaceRealization.target->filter(Interface)->select(isEntity())->notEmpty() and
	aClass.interfaceRealization.target->filter(Interface)->select(isEntity())
		->asSequence()->first().attribute->notEmpty()) then   
	aClass.interfaceRealization.target->filter(Interface)->select(isEntity())
		->asSequence()->first().attribute->select(isPK())
else
	Set{}
endif
/]

[query public getRelatedDaos(aService : Class) : Set(Class) = 
if(aService.clientDependency->notEmpty()) then
aService.clientDependency.supplier->filter(Class)->select(aClass : Class|aClass.isEntity())->asSet()
else
Set{}
endif
/]

