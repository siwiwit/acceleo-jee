[comment encoding = Cp1252 /]
[module generateTestServiceIlmpl('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::service::common::servicePathUtil /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::pathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::requests /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::requests /]
[import org::acceleo::module::pim::uml21::gen::java::spring::java::javaclass /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::structureUtil /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::stringUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::main::common::mainCommon /]
[template public generateTestServiceIlmpl(aClass : Class)]
	[file (aClass.getModel().generateProjectFolder().concat(aClass.getModel().pathToTestJava()).concat('/').concat(aClass.generateJavaPackagePath()).concat('/').concat(aClass.name.toUpperFirst()).concat('Test.java'), false, 'Cp1252')]
/*
 * Copyright 2002-2006 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
[if (aClass.generateJavaPackage().trim().size()>0)]
package [aClass.generateJavaPackage()/];
[/if]

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;

import javax.sql.DataSource;

import junit.framework.TestCase;

import org.impalaframework.facade.Impala;
import org.impalaframework.interactive.InteractiveTestRunner;
import org.impalaframework.module.ModuleDefinitionSource;
import org.impalaframework.module.RootModuleDefinition;
import org.impalaframework.module.source.SimpleModuleDefinitionSource;
import org.springframework.jdbc.core.JdbcTemplate;

[for (anEntity : Class | aClass.getModel().eAllContents(Class)->select(aClass:Class|aClass.isEntity()))]
import [if(anEntity.generateJavaPackage().trim().size()>0)][anEntity.generateJavaPackage()/].[/if][anEntity.name/][if(anEntity.hasEntityParent())]Impl[/if];
[/for]

//import org.springframework.[aClass.getModel().generateSpecificProjectFolder('')/].util.EntityUtils;

import [if(aClass.generateJavaPackage().trim().size()>0)][aClass.generateJavaPackage()/].[/if][aClass.name/];


import org.springframework.util.FileCopyUtils;

/**
 * Base class for Clinic tests. Allows subclasses to specify context locations.
 * 
 * <p>
 * As opposed to the original Spring implementation, this class does not extend
 * AbstractTransactionalDataSourceSpringContextTests. Instead, beans are
 * obtained using <code>DynamicContextHolder.getBean</code>. Otherwise, the
 * contents of the test methods themselves are based on the contents of the
 * original <code>AbstractClinicTests</code> implementation.
 * 
 * @see org.impalaframework.testrun.DynamicContextHolder#getBean(String, Class)
 * @author Ken Krebs
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @author Phil Zoio
 */
public class [aClass.name.toUpperFirst()/]Test extends TestCase implements
        ModuleDefinitionSource {
    private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");

    public static void main(String['['/][']'/] args) {
        InteractiveTestRunner.run([aClass.name.toUpperFirst()/]Test.class);
    }

    private JdbcTemplate jdbcTemplate;

    private [aClass.name.toUpperFirst()/] [aClass.name.toLowerFirst()/];

    public void setUp() throws Exception {
        super.setUp();
        Impala.init(this);
        [aClass.name.toLowerFirst()/] = Impala.getBean("[aClass.name.toLower()/]", [aClass.name.toUpperFirst()/].class);
        jdbcTemplate = new JdbcTemplate(Impala.getBean(
                "dataSource", DataSource.class));

        runScript("../[aClass.getModel().generateSpecificProjectFolder('-build')/]/src/main/resources/db/emptyDB.txt");
        runScript("../[aClass.getModel().generateSpecificProjectFolder('-build')/]/src/main/resources/db/populateDB.txt");
    }

    private void runScript(String file) throws IOException,
            FileNotFoundException {
        String empty = FileCopyUtils.copyToString(new FileReader(file));
        String['['/][']'/] statements = empty.split(";");
        for (String sql : statements) {
            if (sql.trim().length() > 0)
                jdbcTemplate.execute(sql);
        }
    }

    /**
     * This method is provided to set the Clinic instance being tested by the
     * Dependency Injection injection behaviour of the superclass from the
     * <code>org.springframework.test</code> package.
     * 
     * @param [aClass.name.toLowerFirst()/]
     *            [aClass.name.toLowerFirst()/] to test
     */
    public void set[aClass.name.toUpperFirst()/]([aClass.name.toUpperFirst()/] [aClass.name.toLowerFirst()/]) {
        this.[aClass.name.toLowerFirst()/] = [aClass.name.toLowerFirst()/];
    }
    
	[for (aServicrMethod : Operation | aClass.ownedOperation->select(anOper:Operation|anOper.visibility = VisibilityKind::public))]
	public void test[aServicrMethod.name.toUpperFirst()/]() {
	}
	[/for]
[comment][for (anEntity : Class | aModel.eAllContents(Class)->select(aClass:Class|aClass.isEntity()))]
	public void testGet[anEntity.name/]s() {
        Collection<?> [anEntity.name.toLowerFirst()/]s = this.[aModel.generateSpecificProjectFolder('').toLowerFirst()/].get[anEntity.name/]s();

        // Use the inherited JdbcTemplate (from
        // AbstractTransactionalDataSourceSpringContextTests)
        // to verify the results of the query
        assertEquals("JDBC query must show the same number of vets",
                jdbcTemplate.queryForInt("SELECT COUNT(0) FROM [anEntity.name.toLowerFirst()/]s"), [anEntity.name.toLowerFirst()/]s
                        .size());
		[for (it : Integer| Sequence{1,2,3})]
        [anEntity.name/] [anEntity.name.toLowerFirst()/][it/] = ([anEntity.name/]) EntityUtils.getById([anEntity.name.toLowerFirst()/]s, [anEntity.name/].class, 1);
			[if (anEntity.ownedAttribute->notEmpty())]
				[for (aProperty : Property | anEntity.ownedAttribute)]
        assertEquals("[aProperty.name/]1", [anEntity.name.toLowerFirst()/][it/].get[aProperty.name.toUpperFirst()/]());
				[/for]
			[/if]
			[if (anEntity.getOppositeAttributes()->notEmpty())]
				[for (aProperty : Property | anEntity.getOppositeAttributes())]
					[if (aProperty.class->notEmpty() and  aProperty.class->asSequence()->first().ownedAttribute->notEmpty())]
        assertEquals(1, [anEntity.name.toLowerFirst()/][it/].getNrOf[aProperty.class->asSequence()->first().name.convertSingularToPlural()/]());
						[for (aField : Property | aProperty.class.ownedAttribute)]
    	assertEquals("[aField.name/]0", (([aProperty.class.name/]) [anEntity.name.toLowerFirst()/][it/].get[aProperty.class->asSequence()->first().name.convertSingularToPlural()/]().get(0))
                .get[aField.name.toUpperFirst()/]());
						[/for]
					[/if]
				[/for]		
			[/if]
		[/for]
    }

 	public void testLoad[anEntity.name/]() {
		[for (it : Integer| Sequence{1,2,3})]
        [anEntity.name/] o[it/] = this.clinic.load[anEntity.name/]([it/]);
			[for (aProperty : Property | anEntity.ownedAttribute)]
				[if (aProperty.type->notEmpty() and aProperty.type->asSequence()->first()->select(aType:Type|getProperty('java.typeconversion.' + aType.name) = 'String')->notEmpty())]
        assertTrue(o[it/].get[aProperty.name.toUpperFirst()/]().equals("[aProperty.name/][it/]"));
				[elseif (aProperty.type->notEmpty() and aProperty.type->asSequence()->first()->select(aType:Type|getProperty('java.typeconversion.' + aType.name) = 'Date')->notEmpty())]
        assertTrue(o[it/].get[aProperty.name.toUpperFirst()/]().equals(dateFormat.parse("2012/01/01")));
				[else]
        assertTrue(o[it/].get[aProperty.name.toUpperFirst()/]() = [aProperty.name/][it/]));
				[/if]
			[/for]
		[/for]
    }

	[for (aFinder:Operation| anEntity.ownedOperation->select(anOperation:Operation|anOperation.isFinder()))]
    public void test[aFinder.name.toUpperFirst()/]() {
		[protected ('protected')]
		[for (aParameter : Parameter | aFinder.ownedParameter)]
        Collection<?> [anEntity.name.convertSingularToPlural().toLowerFirst()/] = this.[aModel.generateSpecificProjectFolder('')/].[aFinder.name.toUpperFirst()/]([aFinder.generateSampleParameterValues()/]);
		[/for]
		[/protected]
    }
	[/for]

    public void testInsert[anEntity.name/]() {
        Collection<?> [anEntity.name.convertSingularToPlural()/] = this.[aModel.generateSpecificProjectFolder('')/].get[anEntity.name.convertSingularToPlural()/]();
        int found = [anEntity.name.convertSingularToPlural()/].size();
        [anEntity.name/] [anEntity.name.toLowerFirst()/] = new [anEntity.name/]();
		[for (anAttribute : Property | anEntity.ownedAttribute)]
        [anEntity.name.toLowerFirst()/].set[anAttribute.name.toUpperFirst()/]([anAttribute.type.generateSampleParameterValue(anAttribute.name, '4')/]);
		[/for]
        this.[aModel.generateSpecificProjectFolder('')/].store[anEntity.name/]([anEntity.name.toLowerFirst()/]);
        [anEntity.name.convertSingularToPlural()/] = this.[aModel.generateSpecificProjectFolder('')/].get[anEntity.name.convertSingularToPlural()/]();
        assertEquals(found + 1, [anEntity.name.convertSingularToPlural()/].size());
    }

    public void testUpdate[anEntity.name/]() throws Exception {
        [anEntity.name/] o1 = this.[aModel.generateSpecificProjectFolder('')/].load[anEntity.name/](1);
		[for (anAttribute : Property | anEntity.ownedAttribute)]
        [anAttribute.convertToJavaType()/] old[anAttribute.name.toUpperFirst()/] = o1.get[anAttribute.name.toUpperFirst()/]();
		[/for]
		[for (anAttribute : Property | anEntity.ownedAttribute)]
			[if ((getProperty('java.typeconversion.' + anAttribute.type.name) = 'Date')->notEmpty())]
        o1.set[anAttribute.name.toUpperFirst()/](this.increaseOneDay(old[anAttribute.name.toUpperFirst()/]));
			[elseif ((getProperty('java.typeconversion.' + anAttribute.type.name) = 'String')->notEmpty())]
        o1.set[anAttribute.name.toUpperFirst()/](old[anAttribute.name.toUpperFirst()/]+"X"/]);
			[else]
        o1.set[anAttribute.name.toUpperFirst()/](old[anAttribute.name.toUpperFirst()/]+1/]);
			[/if]
		this.[aModel.generateSpecificProjectFolder('')/].store[anEntity.name/](o1);
		[/for]
        o1 = this.[aModel.generateSpecificProjectFolder('')/].load[anEntity.name/](1);
		[for (anAttribute : Property | anEntity.ownedAttribute)]
			[if ((getProperty('java.typeconversion.' + anAttribute.type.name) = 'Date')->notEmpty())]
        assertEquals(this.increaseOneDay(old[anAttribute.name.toUpperFirst()/]), o1.get[anAttribute.name.toUpperFirst()/]());
			[elseif ((getProperty('java.typeconversion.' + anAttribute.type.name) = 'String')->notEmpty())]
        assertEquals(old[anAttribute.name.toUpperFirst()/]+"X", o1.get[anAttribute.name.toUpperFirst()/]());
			[else]
        assertEquals(old[anAttribute.name.toUpperFirst()/]+1, o1.get[anAttribute.name.toUpperFirst()/]());
			[/if]
		[/for]
    }
	
[/for][/comment]

    public RootModuleDefinition getModuleDefinition() {

        return new SimpleModuleDefinitionSource("[aClass.getModel().generateSpecificProjectFolder('-main')/]",
                new String['['/][']'/] { "[aClass.getModel().generateSpecificProjectFolder('-context')/].xml" }, new String['['/][']'/] {
                        "[aClass.getModel().generateSpecificProjectFolder('-hibernate')/]", 
                        "[aClass.getModel().generateSpecificProjectFolder('-service')/]" })
                .getModuleDefinition();
    }

}
	[/file]
[/template]

[template public generateSampleParameterValue(aType : Type, prefix : String, postfix : String)]
		[if ((getProperty('java.typeconversion.' + aType.name) = 'Date')->notEmpty())]
dateFormat.parse("2012/01/01")
		[elseif ((getProperty('java.typeconversion.' + aType.name) = 'String')->notEmpty())]
"[prefix/][postfix/]"		
		[else]
[1/]		
		[/if]
[/template]
[template public generateSampleParameterValues(anOperation : Operation) post (trim())]
	[for (aParameter : Parameter | anOperation.ownedParameter) separator (', ')]
[aParameter.type.generateSampleParameterValue(aParameter.name, '0')/]
	[/for]
[/template]
