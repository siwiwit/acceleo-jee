# Copyright © 2005-2008 Obeo

# Project name. This value will be used to defines package
# hierarchy for generated classes (see baseImports key).
projectName=sample

# Package hierarchy prefix. This key will be used as prefix in
# the package hierarchy for generated classes. The package 
# hierarchy pattern is <baseImports>.<projectName>.<functionalPackage>
baseImports=fr.obeo

# Path to the main java source files root, relative to the folder
# where files will be generated. Must start with a slash "/"
# Let the value empty if you don't want to specify anything.
# This property allows to generate files in a folder structure
# that integrates well with maven.
path.to.main.java=/src/main/java

# Path to the test java source files root, relative to the folder
# where files will be generated. Must start with a slash "/".
# Let the value empty if you don't want to specify anything.
# This property allows to generate files in a folder structure
# that integrates well with maven.
path.to.test.java=/src/test/java

# Path to the main resource files root, relative to the folder
# where files will be generated. Must start with a slash "/".
# Let the value empty if you don't want to specify anything.
# This property allows to generate files in a folder structure
# that integrates well with maven.
path.to.main.resources=/src/main/resources

# Path to the test resource files root, relative to the folder
# where files will be generated. Must start with a slash "/".
# Let the value empty if you don't want to specify anything.
# This property allows to generate files in a folder structure
# that integrates well with maven.
path.to.test.resources=/src/test/resources


# Path to the main webapp files root, relative to the folder
# where files will be generated. Must start with a slash "/".
# Let the value empty if you don't want to specify anything.
# This property allows to generate files in a folder structure
# that integrates well with maven.
path.to.main.webapp=/src/main/webapp

# Path to the test webapp files root, relative to the folder
# where files will be generated. Must start with a slash "/".
# Let the value empty if you don't want to specify anything.
# This property allows to generate files in a folder structure
# that integrates well with maven.
path.to.test.webapp=/src/test/webapp

# If you want packages to look like this:
# com.mycompany.myproject.currentpackage.business, use "true".
# Use "false" (or anything else than "true") if you want packages
# to be arranged technically rather than functionally, like this:
# com.mycompany.myproject.business.currentpackage
use.functional.disposition=false

# Package where entities will be generated
business.package=business

# Package where Value Objects (or Data Transfer Objects, DTO) will be generated
dto.package=dto

# Suffix to use for the class names of value objects
dto.suffix=Dto

# Suffix to use for the class names of entities (empty by default)
entity.suffix=

# Type that will be used for the default PK, called id, used for entities
# that do not declare an explicit Primary Key.
default.pk.type=String

# Copyright (c) 2005-2008 Obeo
#
# This file allows to define type translation between
# types used in the uml model and types generated in
# the generated files.

# java.typeconversion.* keys define translation between
# types used in uml model and java classes. 
java.typeconversion.Integer=int
java.typeconversion.Boolean=boolean
java.typeconversion.String=String
java.typeconversion.Date=Date
java.typeconversion.Float=double
java.typeconversion.Double=Double

# java.wrapper.* keys define translation between types
# used in uml model and types to use for primary keys.
java.wrapper.int=Integer
java.wrapper.long=Long
java.wrapper.float=Float
java.wrapper.double=Double
java.wrapper.char=Character
java.wrapper.byte=Byte
java.wrapper.boolean=Boolean

# Copyright (c) 2005-2008 Obeo
#
# Package where the Dao factory will be generated
dao.package=dao

# Package where Dao interfaces will be generated
dao.api.package=api

# Package where Dao tests will be generated
dao.test.package=test

# Package where Dao implementation will be generated
dao.impl.package=impl

# Package where default Dao implementation will be generated
# (only taken into account if property "useDaoPackage" is "no")
default.impl.package=impl

# Package that contains the DaoException class
daoException.package=fr.obeo.fwk.dao.exception

# Name of the DaoException class
daoException.name=DaoException

# Copyright (c) 2005-2008 Obeo
#
# Generation of value objects for each entity
# Use "yes" if you want to generate one VO for each entity,
# any other value means "no".
generate.dto.per.entity=yes

# Copyright (c) 2005-2008 Obeo
#
# Package where hibernate Dao Implementations will be generated
dao.hibernate.package=hibernate

# Package where hibernate Dao Implementations Tests will be generated
dao.hibernate.test.package=test

# Package that contains the HibernateUtil class
hibernateUtil.package=fr.obeo.fwk.dao.hibernate

# Name of the HibernateUtil class
hibernateUtil.name=HibernateUtil

# Copyright (c) 2005-2008 Obeo
#
# The database where the application will be persisted. 
sql.dbname=dbname

# sql.typeconversion.* keys define translation between
# types used in uml model and sql column types. 
sql.typeconversion.Integer=INT
sql.typeconversion.Boolean=INT(1)
sql.typeconversion.String=VARCHAR(255)
sql.typeconversion.Date=DATETIME
sql.typeconversion.Float=DOUBLE
sql.typeconversion.Double=DOUBLE

# Copyright (c) 2005-2008 Obeo
#
# Package where hibernate Dao Implementations will be generated
dao.hibernate.package=hibernate

# Package where hibernate Dao Implementations Tests will be generated
dao.hibernate.test.package=test

# Package that contains the HibernateUtil class
hibernateUtil.package=fr.obeo.fwk.dao.hibernate

# Name of the HibernateUtil class
hibernateUtil.name=HibernateUtil

Entity=Acceleo::Business::Entity
Dao=Acceleo::Business::Dao
Dto=Acceleo::Business::Dto
Service=Acceleo::Business::Service
Transactional=Acceleo::Business::Transactional
Remote=Acceleo::Business::Remote
Exception=Acceleo::Business::Exception
BusinessException=Acceleo::Business::BusinessException
Config=Acceleo::Business::Config

# Copyright (c) 2005-2008 Obeo
#
# This file allows to override the stereotypes used
# by the generators to "tag" the model elements. You
# can use your own uml profile with your own 
# stereotypes and use JEE module to generate your
# JEE application.

# Entities are classes that will be treated as 
# persisted classes. Dao and Hibernate generators
# will be called on this classes.
Entity=Acceleo::Business::Entity

# Screens are classes that represent a screen in
# the generated UI. Struts generators (Actions, forms
# ...) will be call on this classes.
Screen=Acceleo::UI::Screen

# Title is used on a uml property to defines the title of
# the screen (the name of the property will be used).
Title=Acceleo::UI::Title

# Text is used to specify that the property must be generated
# as a textfield in the screen.
Text=Acceleo::UI::Text

# Password is used to specify that the property must be 
# generated as a password textfield in the screen.
Password=Acceleo::UI::Password

# Textarea is used to specify that the property must be generated
# as a textarea in the screen.
Textarea=Acceleo::UI::TextArea

# Text is used to specify that the property must be generated
# as a radio button in the screen.
Radio=Acceleo::UI::Radio

# Text is used to specify that the property must be generated
# as a combobox in the screen.
Combobox=Acceleo::UI::Combobox

# Text is used to specify that the property must be generated
# as a list in the screen.
List=Acceleo::UI::List

# Text is used to specify that the property must be generated
# as a Table in the screen.
Table=Acceleo::UI::Table

# Text is used to specify that the property must be generated
# as a checkbox button in the screen.
Checkbox=Acceleo::UI::Checkbox

Dao=Acceleo::Business::Dao
Dto=Acceleo::Business::Dto
Service=Acceleo::Business::Service
Transactional=Acceleo::Business::Transactional
Remote=Acceleo::Business::Remote
Exception=Acceleo::Business::Exception
BusinessException=Acceleo::Business::BusinessException
Config=Acceleo::Business::Config

useDtoPackage=yes 