[comment encoding = Cp1252 /]
[module generateInitDBTxt('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::build::common::buildPathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::pathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::requests /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::stringUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::requests /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::build::common::entityUtil /]
[import org::acceleo::module::pim::uml21::services::uml2services /]

[template public generateInitDBTxt(aModel : Model)]
	[file (aModel.generateProjectFolder().concat(aModel.pathToMainResources()).concat('/db/initDB.txt'), false, 'Cp1252')]
		[for (anEntity:Class| aModel.eAllContents(Class)->select(aClass:Class|aClass.isEntity()))]
CREATE TABLE [anEntity.name.toLower().convertSingularToPlural()/] (
	[anEntity.generatePrimaryKeys()/]
	[anEntity.generateFields()/]
	[anEntity.generateForeignKeys()/]
);
		[/for]
[aModel.generateAsociationTables()/]	
	[/file]
[/template]


[template public generatePrimaryKeys(anEntity : Class)]
	[if (anEntity.hasPrimaryKey())]
		[for (aPK : Property | anEntity.getPrimaryProperties(Sequence{})) separator (',')]
			[if (aPK.type.oclIsTypeOf(Enumeration))]
[aPK.owner.oclAsType(Class).name.toLower()/]_[aPK.name.toLower()/]_id ['String'.simpleMySQLType()/]
			[else]
[aPK.owner.oclAsType(Class).name.toLower()/]_[aPK.name.toLower()/]_id [aPK.simpleMySQLType()/] NOT NULL AUTO_INCREMENT PRIMARY KEY
			[/if]
		[/for]
	[else]
[anEntity.name.toLower()/]_id [anEntity.defaultPKType().simpleMySQLType()/] NOT NULL AUTO_INCREMENT PRIMARY KEY
	[/if]
[/template]

[comment][query public getEnumerationFields(anEntity : Class) : Set(Property) = 
anEntity.ownedAttribute->select(aProperty:Property|not aProperty.isPK() and aProperty.type.oclIsTypeOf(Enumeration)) 
/][/comment]


[template public generateFields(anEntity : Class)]
	[if (anEntity.getSimpleFields()->notEmpty())]
		[for (prop:Property|anEntity.getSimpleFields()) before (',') separator (',')]
			[if (prop.type.oclIsTypeOf(Enumeration))]
[prop.name/] ['String'.simpleMySQLType()/]
			[else]
[prop.name/] [prop.simpleMySQLType()/]
			[/if]
		[/for]
	[/if]
[/template]

[template public generateForeignKeys(anEntity : Class)]
	[if (anEntity.getReferenceFields()->notEmpty())]
		[for (prop:Property|anEntity.getReferenceFields()->select(aProperty:Property|aProperty.upper=1)) before (',') separator (',')]
			[if (prop.type.oclAsType(Class).hasPrimaryKey())]
				[if (not prop.type.oclAsType(Class).isCirclePKReferece(Set{}))]
					[for (aPK : Property | prop.type.oclAsType(Class).getPrimaryProperties(Sequence{})) separator (',')]
[prop.type.oclAsType(Class).name.toLower()/]_[aPK.getReferenceColumnName()/] [aPK.simpleMySQLType()/] NOT NULL REFERENCES [prop.type.oclAsType(Class).name.convertSingularToPlural()/]([prop.type.oclAsType(Class).name.toLower()/]_[aPK.name/]_id)	
					[/for]
				[/if]
			[else]
[prop.type.oclAsType(Class).name.toLower()/]_[prop.getReferenceColumnName()/] [anEntity.defaultPKType().simpleMySQLType()/] NOT NULL REFERENCES [prop.type.oclAsType(Class).name.convertSingularToPlural()/]([prop.type.oclAsType(Class).name.toLower()/]_id)
			[/if]
		[/for]
	[/if]
[anEntity.generateFields()/]


[/template]

[comment][template public generateInheritances(anEntity : Class)]
[filterWithStereotype(anEntity.subClass(), getProperty('Entity'))->filter(Class).generateInheritance(anEntity)/]
[/template]

[template public generateInheritance(anEntity : Class)]
	[if (anEntity.hasPrimaryKey())]
		[for (aPK : Property | anEntity.getPrimaryProperties(Sequence{})) separator (',')]
			[if (not aPK.type.oclAsType(Class).isCirclePKReferece(Set{}))]
				[for (aPK : Property | anEntity.getPrimaryProperties(Sequence{})) separator (',')]
[anEntity.name.toLower()/]_[aPK.name.toLower()/]_id [aPK.simpleMySQLType()/] NOT NULL REFERENCES [anEntity.name.convertSingularToPlural()/]([anEntity.name.toLower()/]_[aPK.name.toLower()/]_id)	
				[/for]
			[/if]
		[/for]
	[else]
[anEntity.name.toLower()/]_[anEntity.name.toLower()/]_id [anEntity.defaultPKType().simpleMySQLType()/] NOT NULL REFERENCES [anEntity.name.convertSingularToPlural()/]([anEntity.name.toLower()/]_id)
	[/if]
	
[/template][/comment]


[template public generateAsociationTable(anAssociation : Association)]
		[comment  primary keys/]
		[for (aProperty : Property | anAssociation.memberEnd)]
			[let anEntity : Class  = aProperty.type->asSequence()->first().oclAsType(Class)]
				[if (anEntity.hasPrimaryKey())]
					[for (aPK : Property | anEntity.getPrimaryProperties(Sequence{})) separator (',')]
						[if (aPK.type.oclIsTypeOf(Enumeration))]
[aPK.owner.oclAsType(Class).name.toLower()/]_[aPK.name.toLower()/]_id ['String'.simpleMySQLType()/] NOT NULL AUTO_INCREMENT PRIMARY KEY
						[else]
[aPK.owner.oclAsType(Class).name.toLower()/]_[aPK.name.toLower()/]_id [aPK.simpleMySQLType()/] NOT NULL AUTO_INCREMENT PRIMARY KEY
						[/if]
					[/for]
				[else]
[anEntity.name.toLower()/]_[aProperty.getReferenceColumnName()/] [anEntity.defaultPKType().simpleMySQLType()/] NOT NULL AUTO_INCREMENT PRIMARY KEY
				[/if]
			[/let]
		[/for]
		[if (anAssociation.oclIsTypeOf(AssociationClass))]
			[comment  properties/]
			[for (prop:Property|anAssociation.oclAsType(AssociationClass).classAttributes()->filter(Property)->select(aProperty:Property|aProperty.type.oclIsTypeOf(Enumeration) or aProperty.type.isSimpleType())) before (',') separator (',')]
				[if (prop.type.oclIsTypeOf(Enumeration))]
[prop.name/] ['String'.simpleMySQLType()/]
				[else]
[prop.name/] [prop.simpleMySQLType()/]
				[/if]
			[/for]
			[comment  foreign keys/]
			[for (prop:Property|anAssociation.oclAsType(AssociationClass).getOppositeAttributes()->filter(Property)->select(aProperty:Property|not aProperty.type.oclIsTypeOf(Enumeration) and not aProperty.type.isSimpleType() and aProperty.upper=1)) before (',') separator (',')]
				[if (prop.type.oclAsType(Class).hasPrimaryKey())]
					[if (not prop.type.oclAsType(Class).isCirclePKReferece(Set{}))]
						[for (aPK : Property | prop.type.oclAsType(Class).getPrimaryProperties(Sequence{})) separator (',')]
[prop.type.oclAsType(Class).name.toLower()/]_[prop.getReferenceColumnName()/] [prop.simpleMySQLType()/]	NOT NULL REFERENCES [prop.type.oclAsType(Class).name.convertSingularToPlural()/]([prop.type.oclAsType(Class).name.toLower()/]_[prop.name/]_id)	
						[/for]
					[/if]
				[else]
[prop.type.oclAsType(Class).name.toLower()/]_[prop.getReferenceColumnName()/] [prop.type.defaultPKType().simpleMySQLType()/] NOT NULL REFERENCES [prop.type.oclAsType(Class).name.convertSingularToPlural()/]([prop.type.oclAsType(Class).name.toLower()/]_id)	
				[/if]
			[/for]
		[/if]
[/template]




[template public generateAsociationTables(aModel : Model)]
	[for (anAssociation : Association | aModel.eAllContents(Association))]
	[if (anAssociation.memberEnd->asSequence()->forAll(aProperty:Property|aProperty.upper=-1 and aProperty.type->notEmpty() and aProperty.type.oclIsTypeOf(Class) and aProperty.type.oclAsType(Class).isEntity()))]
CREATE TABLE [anAssociation.memberEnd.type.name->asOrderedSet()->sep('_')/] (
[anAssociation.generateAsociationTable()/]
);
	[/if]
	[/for]
[/template]


[comment][template public generateAsociationTable(anAssociation : Association)]
	[if (anAssociation.memberEnd->asSequence()->forAll(aProperty:Property|aProperty.upper=-1 and aProperty.type->notEmpty() and aProperty.type.oclIsTypeOf(Class) and aProperty.type.oclAsType(Class).isEntity()))]
CREATE TABLE [anAssociation.memberEnd.type.name->asOrderedSet()->sep('_')/] (
		[-comment-  primary keys/]
		[for (aProperty : Property | anAssociation.memberEnd)]
			[let anEntity : Class  = aProperty.type->asSequence()->first().oclAsType(Class)]
				[if (anEntity.hasPrimaryKey())]
					[for (aPK : Property | anEntity.getPrimaryProperties(Set{})) separator (',')]
						[if (aPK.type.oclIsTypeOf(Enumeration))]
[aPK.owner.oclAsType(Class).name.toLower()/]_[aPK.name.toLower()/]_id ['String'.simpleMySQLType()/] NOT NULL AUTO_INCREMENT PRIMARY KEY
						[else]
[aPK.owner.oclAsType(Class).name.toLower()/]_[aPK.name.toLower()/]_id [aPK.simpleMySQLType()/] NOT NULL AUTO_INCREMENT PRIMARY KEY
						[/if]
					[/for]
				[else]
[anEntity.name.toLower()/]_[aProperty.getReferenceColumnName()/] [anEntity.defaultPKType().simpleMySQLType()/] NOT NULL AUTO_INCREMENT PRIMARY KEY
				[/if]
			[/let]
		[/for]
		[if (anAssociation.oclIsTypeOf(AssociationClass))]
			[-comment-  properties/]
			[for (prop:Property|anAssociation.oclAsType(AssociationClass).classAttributes()->filter(Property)->select(aProperty:Property|aProperty.type.oclIsTypeOf(Enumeration) or aProperty.type.isSimpleType())) before (',') separator (',')]
				[if (prop.type.oclIsTypeOf(Enumeration))]
[prop.name/] ['String'.simpleMySQLType()/]
				[else]
[prop.name/] [prop.simpleMySQLType()/]
				[/if]
			[/for]
			[-comment-  foreign keys/]
			[for (prop:Property|anAssociation.oclAsType(AssociationClass).classAttributes()->filter(Property)->select(aProperty:Property|not aProperty.type.oclIsTypeOf(Enumeration) and not aProperty.type.isSimpleType() and aProperty.upper=1)) before (',') separator (',')]
				[if (prop.type.oclAsType(Class).hasPrimaryKey())]
					[if (not prop.type.oclAsType(Class).isCirclePKReferece(Set{}))]
						[for (aPK : Property | prop.type.oclAsType(Class).getPrimaryProperties(Set{})) separator (',')]
[prop.type.oclAsType(Class).name.toLower()/]_[prop.getReferenceColumnName()/] [prop.simpleMySQLType()/]	NOT NULL REFERENCES [prop.type.oclAsType(Class).name.convertSingularToPlural()/]([prop.type.oclAsType(Class).name.toLower()/]_[prop.name/]_id)	
						[/for]
					[/if]
				[else]
[prop.type.oclAsType(Class).name.toLower()/]_[prop.getReferenceColumnName()/] [prop.type.defaultPKType().simpleMySQLType()/] NOT NULL REFERENCES [prop.type.oclAsType(Class).name.convertSingularToPlural()/]([prop.type.oclAsType(Class).name.toLower()/]_id)	
				[/if]
			[/for]
		[/if]
);
	[/if]
[/template][/comment]
